.. _readme-buildingdocs:

=============================
Building Chapel Documentation
=============================
The live Chapel web documentation lives at https://chapel-lang.org/docs/.
All of the source for the documentation is in the chapel source repository, and
this note talks about how those are organized and built into the html documentation
seen on the website.

The easiest way to build the Chapel web documentation is to use the top level
of your chapel github clone

make target::
   [g]make docs

This will build the documentation for the standard and internal modules using
chpldoc, and symlink all of the ``$CHPL_HOME/doc/`` documents over to
a sphinx project that lives in ``$CHPL_HOME/doc/``. Once built,
the documentation can be viewed at ``$CHPL_HOME/doc/html/index.html``.

The html documentation is also generated by the github CI (continuous integration)
process.  You can go to your pull request in github, click on "Checks",
then "Ci" (on the left), and then scroll down to see the "documentation"
(at the very bottom).  It enables you to download a zip file of the built
documentation.

Recent and previous releases of the documentation can be found at
https://chapel-lang.org/docs/.


How the HTML is Generated
=========================

The Chapel documentation shown at https://chapel-lang.org/docs/ is generated
in three different ways:

#.  Restructure Text files (with a .rst extension) are converted into .html
    files via sphinx (https://sublime-and-sphinx-guide.readthedocs.io/).
#.  Comments and code from Chapel source files are converted into .rst files
    using ``chapel/doc/util/chpl2rst.py``.
#.  Some comments and code from Chapel source files are converted into .rst
    files using ``chapel/tools/chpldoc/``, which will leave out TODOs,
    FIXMEs, and other parts of the comments.

========================================
Contributing to the Chapel Documentation
========================================

See https://chapel-lang.org/contributing.html for general instructions on how
to contribute to Chapel.  Contributing to the documentation is similar except
you will want to build the documentation (see above) and check the generated
html files before creating a pull request.  Also note that if you are editing
.chpl files in the primers directory for example, you will need to 
ref:develop-and-test-contributions-locally.


Editing the Source .rst and .chpl files
=======================================

The .chpl files are text files that can be edited with any text editor.
See ``$CHPL_HOME/highlight/README.md`` for information about some available 
extensions for editors to highlight Chapel code.

The .rst files are also text.  The Chapel files that are being converted into .rst
files have rst text in comments.  There are some previewers for .rst text in 
vscode and atom, but none of them are quite as useful as editing a .rst file
in github and using the preview option.  The way to see all of the links that
are created is to do the ``make docs`` that is described above.


Files that live in the repository
=======================================
Some of the documentation files are not converted into html files.  Instead
they are raw html files or raw .rst files that live in the chapel-www internal
repository (FIXME: correct?) or the public github respository.

Examples include:
https://chapel-lang.org/contributing.html

https://github.com/chapel-lang/chapel/blob/main/doc/rst/developer/bestPractices/ContributorInfo.rst



Linking between files
=======================================
Linking between files when both files are in https://chapel-lang.org/docs/.
FIXME: talk about using the ref:file-anchor.

Linking between files in https://chapel-lang.org/docs/ and 
the repository.
FIXME: Brad, how do I do this?

============================================
Organization of Chapel Documentation Sources
============================================

The file chapel/doc/rst/index.rst is the root file that sets up the
structure of the documentation and results in the current sidebar
displayed on https://chapel-lang.org/docs/.


There is a strong correlation in side bar of
https://chapel-lang.org/docs/ and the doc/rst/ subdirectories,
except for lots of the stuff under Writing Chapel Programs.

Below, the various kinds of documentation are organized by how they are 
converted into .html files.  The first column indicates the document name
in the sidebar of https://chapel-lang.org/docs/, the second column shows
the source files in the repository, and the last column indicates the sub
heading the file is under.

.. list-table:: **Using Sphinx to convert .rst files to .html files**
   :widths: 100 100 100
   :header-rows: 1

   * - Doc name in Sidebar
     - Source file(s)
     - Sidebar subheading
   * - Quickstart Instructions
     - doc/rst/usingchapel/QUICKSTART.rst
     - COMPILING AND RUNNING CHAPEL
   * - Using Chapel
     - doc/rst/usingchapel/*
     - COMPILING AND RUNNING CHAPEL
   * - Platform-Specific Notes
     - doc/rst/platforms/*
     - COMPILING AND RUNNING CHAPEL
   * - Technical Notes
     - doc/rst/technotes/*
     - COMPILING AND RUNNING CHAPEL
   * - Tools
     - doc/rst/tools/*
     - COMPILING AND RUNNING CHAPEL
   * - Quick Reference
     - language/reference.rst
     - WRITING CHAPEL PROGRAMS
   * - Mason Packages
     - doc/rst/mason-packages.rst
     - WRITING CHAPEL PROGRAMS
   * - Chapel Users Guide (WIP)
     - doc/rst/users-guide
     - WRITING CHAPEL PROGRAMS
   * - Chapel Evolution
     - doc/rst/language/evolution.rst
     - LANGUAGE HISTORY
   * - Documentation Archives
     - language/archivedSpecs.rst
     - LANGUAGE HISTORY


.. list-table:: **Use chpl2rst.py on .chpl files and then sphinx to generate html**
   :widths: 100 100 100
   :header-rows: 1

   * - Doc name in Sidebar
     - Source file(s)
     - Sidebar subheading
   * - Hello World Variants
     - examples/index.rst + test/release/examples/hello*.chpl
     - WRITING CHAPEL PROGRAMS
   * - Primers
     - primers/index.rst + test/release/examples/primers/\*.chpl
     - WRITING CHAPEL PROGRAMS



.. list-table:: **Use chpldoc on .chpl files and then sphinx to generate html**
   :widths: 100 100 100
   :header-rows: 1

   * - Built-in Types and Functions
     - doc/rst/builtins + modules/internal/\*.chpl
     - WRITING CHAPEL PROGRAMS
   * - Standard Modules
     - doc/rst/modules/standard + modules/standard/\*.chpl
     - WRITING CHAPEL PROGRAMS
   * - Package Modules
     - doc/rst/modules/packages + modules/packages/\*.chpl
     - WRITING CHAPEL PROGRAMS
   * - Standard Layouts and Distributions
     - doc/rst/modules/layoutdist + modules/layouts/\*.chpl + modules/dists/\*.chpl
     - WRITING CHAPEL PROGRAMS


===============================================
Files that have information about documentation
===============================================

 - **chapel/README.devel**, how doc/ differs in the release vs. the dev version
 - **chapel/doc/bestPractices/releasingDocs.md**, how to create the release documentation
   and push it to the website
 - **chapel/doc/README.rst**, talks about .rst and has a list of the documentation
   available in .rst
 - **chapel/doc/rst/developer/bestPractices/buildingdocs.rst**, this file
 
 Developers should also consider looking through the files in ``doc/rst/developer/bestPractices/``.
 Some of these files do not end up linked into the public documentation web pages.
 


